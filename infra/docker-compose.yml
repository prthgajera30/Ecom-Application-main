services:
  nginx:
    image: nginx:1.25-alpine
    container_name: ecommerce_nginx
    depends_on:
      - web
      - api
      - recs
    ports:
      - "8085:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - appnet

  web:
    build:
      context: ..
      dockerfile: apps/web/Dockerfile
    container_name: ecommerce_web
    environment:
      NEXT_PUBLIC_API_BASE: /api
      NODE_ENV: production
    depends_on:
      - api
    networks:
      - appnet

  api:
    build:
      context: ..
      dockerfile: apps/api/Dockerfile
    container_name: ecommerce_api
    environment:
      NODE_ENV: production
      JWT_SECRET: change_me
      DATABASE_URL: postgres://ecom:ecom@postgres:5432/shop_ubuntu?schema=public
      MONGO_URL: mongodb://mongo:27017/shop_ubuntu
      STRIPE_SECRET_KEY: sk_test_xxx
      STRIPE_WEBHOOK_SECRET: whsec_xxx
      RECS_URL: http://localhost:5000
    volumes:
      - ../apps/api:/usr/src/app
      - ../scripts:/usr/src/app/scripts
      - /usr/src/app/node_modules
    command: sh -c "pnpm install && pnpm dev"
    depends_on:
      - postgres
      - mongo
      - recs
    networks:
      - appnet

  recs:
    build:
      context: ..
      dockerfile: apps/recs/Dockerfile
      target: dev
    container_name: ecommerce_recs
    environment:
      FLASK_ENV: development
    volumes:
      - ../apps/recs:/usr/src/app
    command: sh -c "pip install -r requirements.txt && flask --app app.py run --host=0.0.0.0 --port=5000"
    networks:
      - appnet

  postgres:
    image: postgres:16-alpine
    container_name: ecommerce_postgres
    environment:
      POSTGRES_USER: ecom
      POSTGRES_PASSWORD: ecom
      POSTGRES_DB: shop_ubuntu
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - appnet

  mongo:
    image: mongo:6
    container_name: ecommerce_mongo
    volumes:
      - mongodata:/data/db
    ports:
      - "27017:27017"
    networks:
      - appnet
      
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes
    volumes:
      - redisdata:/data
    networks:
      - appnet

volumes:
  pgdata:
  mongodata:
  redisdata:

networks:
  appnet:
    driver: bridge
