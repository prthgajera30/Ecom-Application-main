generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  passwordHash String
  role      String   @default("user")

  // Relations
  orders        Order[]
  wishlist      Wishlist[]
  addresses     Address[]
  paymentMethods PaymentMethod[]
  events        Event[]
  reviews       Review[]
  reviewHelpful ReviewHelpful[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  customer
  admin
}

model Address {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  label      String?
  fullName   String
  line1      String
  line2      String?
  city       String
  state      String?
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PaymentMethod {
  id               String         @id @default(uuid())
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  stripePaymentMethodId String?   @unique
  cardBrand        String?
  last4            String?
  expiryMonth      Int?
  expiryYear       Int?
  isDefault        Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model ShippingOption {
  id               String   @id @default(uuid())
  name             String
  description      String?
  amount           Int
  estimatedDaysMin Int?
  estimatedDaysMax Int?
  active           Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orders           Order[]
}

model Order {
  id               String       @id @default(uuid())
  user             User         @relation(fields: [userId], references: [id])
  userId           String
  sessionId        String?
  subtotal         Int          @default(0)
  taxAmount        Int          @default(0)
  shippingAmount   Int          @default(0)
  discountAmount   Int          @default(0)
  total            Int
  currency         String
  promoCode        String?
  status           OrderStatus  @default(pending)
  createdAt        DateTime     @default(now())
  shippingAddress  Json?
  shippingOption   ShippingOption? @relation(fields: [shippingOptionId], references: [id])
  shippingOptionId String?

  // Enhanced Order Tracking Fields
  trackingNumber   String?
  carrier          String?           // "fedex", "ups", "dhl", "usps", etc.
  shippingStatus   ShippingStatus?   // current shipping status
  trackingUrl      String?           // direct carrier tracking URL
  shippedAt        DateTime?         // when order was shipped
  estimatedDelivery DateTime?        // carrier estimated delivery
  actualDelivery   DateTime?         // actual delivery timestamp
  shippingNotes    String?           // internal shipping notes
  packageWeight    Float?            // package weight in lbs/kg

  items            OrderItem[]
  payment          Payment?
  trackingEvents   TrackingEvent[]
  reviews          Review[]
}

enum OrderStatus {
  pending
  paid
  canceled
}

enum ShippingStatus {
  pending
  shipped
  in_transit
  out_for_delivery
  delivered
  failed_delivery
  returned
}

model OrderItem {
  id             String @id @default(uuid())
  order          Order  @relation(fields: [orderId], references: [id])
  orderId        String
  productId      String
  title          String?
  price          Int
  qty            Int
  variantId      String?
  variantLabel   String?
  variantOptions Json?
}

model Payment {
  id                    String   @id @default(uuid())
  order                 Order    @relation(fields: [orderId], references: [id])
  orderId               String   @unique
  provider              String   @default("stripe")
  stripePaymentIntentId String?
  amount                Int
  status                String
  metadata              Json?
  createdAt             DateTime @default(now())
}

model Event {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  type      String
  payload   Json
  createdAt DateTime @default(now())
}

model Wishlist {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model TrackingEvent {
  id          String   @id @default(uuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  carrier     String   // "fedex", "ups", "dhl", etc.
  status      String   // tracking status from carrier
  description String   // human readable status description
  location    String?  // location information if available
  timestamp   DateTime // when this event occurred
  details     Json?    // additional carrier-specific details
  createdAt   DateTime @default(now())

  @@index([orderId])
  @@index([carrier, status])
}

model Review {
  id             String          @id @default(uuid())
  productId      String          // Product ID this review is for
  userId         String?         // User who wrote the review (null for anonymous)
  user           User?           @relation(fields: [userId], references: [id])
  orderId        String?         // Order this review is associated with
  order          Order?          @relation(fields: [orderId], references: [id])

  rating         Int             // 1-5 star rating
  title          String?         // Review headline/title
  body           String?         // Full review text
  verified       Boolean         @default(false) // Verified purchase

  helpfulCount   Int             @default(0) // Number of helpful votes
  status         ReviewStatus    @default(draft) // Moderation status

  authorName     String?         // Guest reviewer name
  authorEmail    String?         // Guest reviewer email

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  reviewedAt     DateTime?       // When review was written

  responses      ReviewResponse[]
  helpfulVotes   ReviewHelpful[]

  @@index([productId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model ReviewResponse {
  id        String   @id @default(uuid())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  String

  // Store admin user who responded
  adminId   String?
  adminName String
  response  String   // Admin response text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reviewId])
}

model ReviewHelpful {
  id       String @id @default(uuid())
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId String
  userId   String // User who voted helpful
  user     User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([reviewId, userId])
  @@index([reviewId])
  @@index([userId])
}



enum ReviewStatus {
  draft       // Unmoderated
  pending     // Awaiting moderation
  published   // Approved and visible
  rejected    // Rejected during moderation
  hidden      // Hidden by admin or user
}
