# Environment variables used by docker-compose.prod.yml
# Copy this file to env.prod and replace placeholder values with your production secrets.

# Database automation
# Leave commented (default) to automatically run migrations and seed the demo data when the API container starts.
#AUTO_DB_SETUP=1

# PostgreSQL configuration (shared between the database container and the API)
# Use the service hostname (postgres) instead of localhost so the API container can connect inside Docker networking.
# Pick host-specific values so each deployment seeds its own schema.
POSTGRES_USER=postgres
POSTGRES_PASSWORD=change-me
POSTGRES_DB=shop_prod
DATABASE_URL=postgres://postgres:change-me@postgres:5432/shop_prod?schema=public
# If you reuse an env file with localhost URLs or different credentials for local development, uncomment these overrides so the entrypoint rewrites the
# host/port/credentials for the containers at runtime.
#DATABASE_HOST_OVERRIDE=postgres
#DATABASE_PORT_OVERRIDE=5432
#DATABASE_USER_OVERRIDE=postgres
#DATABASE_PASSWORD_OVERRIDE=change-me
#DATABASE_NAME_OVERRIDE=shop

# MongoDB connection string consumed by the API service
# Likewise, reference the mongo service hostname.
MONGO_URL=mongodb://mongo:27017/shop_prod
#MONGO_HOST_OVERRIDE=mongo
#MONGO_PORT_OVERRIDE=27017

# Redis configuration
REDIS_URL=redis://redis:6379
REDIS_PASSWORD=${REDIS_PASSWORD:-}

# API secrets
JWT_SECRET=replace-with-strong-secret
APP_URL=http://localhost:8085
STRIPE_SECRET_KEY=sk_live_or_test_key
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret
